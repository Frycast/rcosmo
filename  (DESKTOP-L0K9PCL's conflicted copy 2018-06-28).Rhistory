m[1]
# Install mmap from tarball
devtools::install_local("../mmap", force = TRUE)
library(mmap)
filename <- "../CMB_map_smica1024.fits"
zz <- file(filename, "rb")
mystruct <- struct(I = real32(),
Q = real32(),
U = real32(),
PMASK = int8(),
TMASK = int8())
m <- mmap(file = "../CMB_map_smica1024.fits",
mode = mystruct,
off = 2880*3,
endian = "big")
extractFUN(m) <- function(X) do.call(data.frame, X)
m[1]
# Install mmap from tarball
devtools::install_local("../mmap", force = TRUE)
library(mmap)
filename <- "../CMB_map_smica1024.fits"
zz <- file(filename, "rb")
mystruct <- struct(I = real32(),
Q = real32(),
U = real32(),
PMASK = int8(),
TMASK = int8())
m <- mmap(file = "../CMB_map_smica1024.fits",
mode = mystruct,
off = 2880*3,
endian = "big")
extractFUN(m) <- function(X) do.call(data.frame, X)
m[1]
# Install mmap from tarball
devtools::install_local("../mmap", force = TRUE)
library(mmap)
filename <- "../CMB_map_smica1024.fits"
zz <- file(filename, "rb")
mystruct <- struct(I = real32(),
Q = real32(),
U = real32(),
PMASK = int8(),
TMASK = int8())
m <- mmap(file = "../CMB_map_smica1024.fits",
mode = mystruct,
off = 2880*3,
endian = "big")
extractFUN(m) <- function(X) do.call(data.frame, X)
m[1]
# Install mmap from tarball
devtools::install_local("../mmap", force = TRUE)
library(mmap)
filename <- "../CMB_map_smica1024.fits"
zz <- file(filename, "rb")
mystruct <- struct(I = real32(),
Q = real32(),
U = real32(),
PMASK = int8(),
TMASK = int8())
m <- mmap(file = "../CMB_map_smica1024.fits",
mode = mystruct,
off = 2880*3,
endian = "big")
extractFUN(m) <- function(X) do.call(data.frame, X)
m[1]
# Install mmap from tarball
devtools::install_local("../mmap", force = TRUE)
# Install mmap from tarball
devtools::install_local("../mmap", force = TRUE)
library(mmap)
filename <- "../CMB_map_smica1024.fits"
zz <- file(filename, "rb")
mystruct <- struct(I = real32(),
Q = real32(),
U = real32(),
PMASK = int8(),
TMASK = int8())
m <- mmap(file = "../CMB_map_smica1024.fits",
mode = mystruct,
off = 2880*3,
endian = "big")
extractFUN(m) <- function(X) do.call(data.frame, X)
m[1]
case REALSXP:
PROTECT(vec_dat = allocVector(REALSXP, LEN));
real_vec_dat = REAL(vec_dat);
switch(fieldCbytes) {
case sizeof(float): /* 4 byte */
for(ii=0; ii<LEN; ii++) {
memcpy(&floatbuf,
//&(byte_buf[ii*Cbytes+offset]),
&(data[((long)index_p[ii]-1) * Cbytes + offset]),
sizeof(char)*sizeof(float));
if(endian == 2){
real_vec_dat[ii] = (double)ReverseFloat(floatbuf);
} else {
real_vec_dat[ii] = (double)floatbuf;
}
}
break;
######## Experimenting code for thesis ################
sky <- CMBDataFrame("../CMB_map_smica1024.fits")
library(rcosmo)
######## Experimenting code for thesis ################
sky <- CMBDataFrame("../CMB_map_smica1024.fits")
sky.sample <- CMBDataFrame(sky, sample.size = 100000, coords = "cartesian")
# Apply the temperature mask
sky.masked <- sky.sample[as.logical(sky.sample$TMASK),]
# Visualise the temperature mask
plot(sky.sample, col = sky.sample$TMASK)
sum(sky.sample$TMASK)
sum(sky$TMASK)
head(sky)
######## Experimenting code for thesis ################
sky <- CMBDataFrame("../CMB_map_smica1024.fits", include.masks = TRUE)
sky.sample <- CMBDataFrame(sky, sample.size = 100000, coords = "cartesian")
# Apply the temperature mask
sky.masked <- sky.sample[as.logical(sky.sample$TMASK),]
# Visualise the temperature mask
plot(sky.sample, col = sky.sample$TMASK)
# Visualise the temperature mask
plot(sky.sample, col = sky.sample$TMASK + 1)
# Visualise the temperature mask
plot(sky.sample, col = sky.sample$TMASK + 1, size = 3)
# Visualise the temperature mask
plot(sky.sample, col = sky.sample$TMASK + 1, size = 3, back.col = "white")
# Calculate var and mean on masked sky
m2 <- mean(sky.masked$I*1e9)
v2 <- var(sky.masked$I*1e9)
m2; v2
# Calculate var and mean on masked sky
m2 <- mean(sky.masked$I)
v2 <- var(sky.masked$I)
m2; v2
v2 <- sd(sky.masked$I*1e9)
m2; v2
v2 <- sd(sky.masked$I*1e9)
m2; v2
v2 <- var(sky.masked$I)
m2; v2
m2
v2
m <- mean(sky.sample$I)
v <- var(sky.sample$I)
m
v
area(sky.sample)
geoArea(sky.sample)
library(rcosmo)
library(rcosmo)
alpha <- 1e-7
A <- pixelArea(sky.sample)
A*sum(sky.sample$I[sky.sample$I > 1e-7])
A <- pixelArea(sky.sample)
?pixelArea
library(rcosmo)
library(rcosmo)
alpha <- 1e-7
A <- pixelArea(sky.sample)
A*sum(sky.sample$I[sky.sample$I > 1e-7])
alpha <- 1e-6
A <- pixelArea(sky.sample)
A*sum(sky.sample$I[sky.sample$I > 1e-7])
sum(sky.sample$I[sky.sample$I > 1e-7])
A*sum(sky.sample$I[sky.sample$I > alpha])
alpha <- 1e-6
A <- pixelArea(sky.sample)
A*sum(sky.sample$I[sky.sample$I > alpha])
alpha <- 1e-5
A <- pixelArea(sky.sample)
A*sum(sky.sample$I[sky.sample$I > alpha])
alpha <- 0
A <- pixelArea(sky.sample)
A*sum(sky.sample$I[sky.sample$I > alpha])
alpha <- 0
A <- pixelArea(sky.sample)
A*sum(sky$I[sky$I > alpha])
alpha <- -10
A <- pixelArea(sky.sample)
A*sum(sky$I[sky$I > alpha])
A*sum(sky$I > alpha)
4*pi
alpha <- 0
A <- pixelArea(sky.sample)
A*sum(sky$I > alpha)
4*pi/2
mean(sky$I)
var(sky$I)
# Apply the temperature mask
sky.masked <- sky[as.logical(sky$TMASK),]
# Calculate var and mean on masked sky
mean(sky.masked$I)
var(sky.masked$I)
# Calculate var and mean on unmasked sky
mean(sky$I)
var(sky$I)
alpha <- 0
A <- pixelArea(sky.sample)
A*sum(sky$I < alpha)
A <- pixelArea(sky)
A*sum(sky$I < alpha)
2*pi
A*sum(sky.masked$I < alpha)
A*sum(sky.masked$I > alpha)
mean(sky.masked)
mean(sky.masked$I)
summary(sky.masked$I)
alpha <- 1e-10
A <- pixelArea(sky)
A*sum(sky.masked$I < alpha)
alpha <- -10
A <- pixelArea(sky)
A*sum(sky.masked$I < alpha)
dt <- pi/5; dp <- pi/16; end <- pi + pi/20
theta <- rev(c(2*dt, 4*dt, 4*dt, 2*dt, dt, dt, 2*dt, 3*dt,
3*dt, dt, 0, dt, 2*dt, end))
phi <- rev(c(0, 6*dp, 12*dp, 14*dp, 12*dp, 7*dp, 6*dp, 9*dp,
5*dp, 4*dp, 8*dp, 15*dp, end, 14*dp))
spiral <- CMBWindow(theta = theta, phi = phi)
library(rcosmo)
dt <- pi/5; dp <- pi/16; end <- pi + pi/20
theta <- rev(c(2*dt, 4*dt, 4*dt, 2*dt, dt, dt, 2*dt, 3*dt,
3*dt, dt, 0, dt, 2*dt, end))
phi <- rev(c(0, 6*dp, 12*dp, 14*dp, 12*dp, 7*dp, 6*dp, 9*dp,
5*dp, 4*dp, 8*dp, 15*dp, end, 14*dp))
spiral <- CMBWindow(theta = theta, phi = phi)
plot(spiral, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow")
plot(CMBDataFrame(nside = 32, col = "black"))
plot(sky.spiral, back.col = "black")
plot(spiral, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow")
plot(CMBDataFrame(nside = 32, col = "black"))
plot(spiral, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow")
plot(CMBDataFrame(nside = 32), col = "black", back.col = "white")
plot(spiral, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow")
plot(CMBDataFrame(nside = 32), col = "blue", back.col = "white")
plot(spiral, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow")
df <- data.frame(theta = c(pi-pi/40, pi/2+pi/10, pi/2,
pi/2-pi/10, 0, pi/2-pi/10, pi/2, pi/2+pi/10),
phi = c(3*pi/2, 3*pi/2+pi/10, 0, 3*pi/2+pi/10,
0, 3*pi/2-pi/10, pi+pi/40, 3*pi/2-pi/10))
star <- CMBWindow(df)
cmbdf.st <- window(cmbdf, star)
plot(cmbdf, back.col = "black")
plot(cmbdf.st, col = "green", size = 1.5, add = TRUE)
a <- lapply(triangulate(star), plot)
## STAR
df <- data.frame(theta = c(pi-pi/40, pi/2+pi/10, pi/2,
pi/2-pi/10, 0, pi/2-pi/10, pi/2, pi/2+pi/10),
phi = c(3*pi/2, 3*pi/2+pi/10, 0, 3*pi/2+pi/10,
0, 3*pi/2-pi/10, pi+pi/40, 3*pi/2-pi/10))
star <- CMBWindow(df)
cmbdf.st <- window(cmbdf, star)
## STAR
cmbdf <- CMBDataFrame(nside = 32)
plot(cmbdf, back.col = "black")
plot(cmbdf, back.col = "black", col = "blue")
plot(cmbdf.st, col = "green", size = 1.5, add = TRUE)
cmbdf.st <- window(cmbdf, star)
plot(cmbdf.st, col = "green", size = 1.5, add = TRUE)
a <- lapply(triangulate(star), plot)
cmbdf <- CMBDataFrame(nside = 32)
df <- data.frame(theta = c(pi-pi/40, pi/2+pi/10, pi/2,
pi/2-pi/10, 0, pi/2-pi/10, pi/2, pi/2+pi/10),
phi = c(3*pi/2, 3*pi/2+pi/10, 0, 3*pi/2+pi/10,
0, 3*pi/2-pi/10, pi+pi/40, 3*pi/2-pi/10))
star <- CMBWindow(df)
cmbdf.st <- window(cmbdf, star)
plot(cmbdf, back.col = "white", col = "blue")
plot(cmbdf.st, col = "green", size = 1.5, add = TRUE)
a <- lapply(triangulate(star), plot)
dt <- pi/5
dp <- pi/16
end <- pi + pi/20
theta <- rev(c(2*dt, 4*dt, 4*dt, 2*dt, dt, dt, 2*dt, 3*dt,
3*dt, dt, 0, dt, 2*dt, end))
phi <- rev(c(0, 6*dp, 12*dp, 14*dp, 12*dp, 7*dp, 6*dp, 9*dp,
5*dp, 4*dp, 8*dp, 15*dp, end, 14*dp))
df <- data.frame(theta = theta, phi = phi)
spiral <- CMBWindow(df)
cmbdf.sp <- window(cmbdf, new.window = spiral)
plot(cmbdf, back.col = "black")
plot(cmbdf.sp, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow")
dt <- pi/5
dp <- pi/16
end <- pi + pi/20
theta <- rev(c(2*dt, 4*dt, 4*dt, 2*dt, dt, dt, 2*dt, 3*dt,
3*dt, dt, 0, dt, 2*dt, end))
phi <- rev(c(0, 6*dp, 12*dp, 14*dp, 12*dp, 7*dp, 6*dp, 9*dp,
5*dp, 4*dp, 8*dp, 15*dp, end, 14*dp))
df <- data.frame(theta = theta, phi = phi)
spiral <- CMBWindow(df)
cmbdf.sp <- window(cmbdf, new.window = spiral)
plot(cmbdf, back.col = "white", col = "blue")
plot(cmbdf.sp, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow")
## STAR
cmbdf <- CMBDataFrame(nside = 64)
## SPIRAL
dt <- pi/5
dp <- pi/16
end <- pi + pi/20
theta <- rev(c(2*dt, 4*dt, 4*dt, 2*dt, dt, dt, 2*dt, 3*dt,
3*dt, dt, 0, dt, 2*dt, end))
phi <- rev(c(0, 6*dp, 12*dp, 14*dp, 12*dp, 7*dp, 6*dp, 9*dp,
5*dp, 4*dp, 8*dp, 15*dp, end, 14*dp))
df <- data.frame(theta = theta, phi = phi)
spiral <- CMBWindow(df)
cmbdf.sp <- window(cmbdf, new.window = spiral)
plot(cmbdf, back.col = "white", col = "blue")
plot(cmbdf.sp, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow")
a <- lapply(triangulate(spiral), plot, col = "yellow", lwd = 2)
a <- lapply(triangulate(spiral), plot, col = "yellow", lwd = 4)
dt <- pi/5
dp <- pi/16
end <- pi + pi/20
theta <- rev(c(2*dt, 4*dt, 4*dt, 2*dt, dt, dt, 2*dt, 3*dt,
3*dt, dt, 0, dt, 2*dt, end))
phi <- rev(c(0, 6*dp, 12*dp, 14*dp, 12*dp, 7*dp, 6*dp, 9*dp,
5*dp, 4*dp, 8*dp, 15*dp, end, 14*dp))
df <- data.frame(theta = theta, phi = phi)
spiral <- CMBWindow(df)
cmbdf.sp <- window(cmbdf, new.window = spiral)
plot(cmbdf, back.col = "white", col = "blue")
plot(cmbdf.sp, col = "red", add = TRUE, size = 1.5)
a <- lapply(triangulate(spiral), plot, col = "yellow", lwd = 4)
dt <- pi/5
dp <- pi/16
end <- pi + pi/20
theta <- rev(c(2*dt, 4*dt, 4*dt, 2*dt, dt, dt, 2*dt, 3*dt,
3*dt, dt, 0, dt, 2*dt, end))
phi <- rev(c(0, 6*dp, 12*dp, 14*dp, 12*dp, 7*dp, 6*dp, 9*dp,
5*dp, 4*dp, 8*dp, 15*dp, end, 14*dp))
df <- data.frame(theta = theta, phi = phi)
spiral <- CMBWindow(df)
cmbdf.sp <- window(cmbdf, new.window = spiral)
plot(cmbdf, back.col = "white", col = "blue")
plot(cmbdf.sp, col = "red", add = TRUE, size = 2)
a <- lapply(triangulate(spiral), plot, col = "yellow", lwd = 4)
polygon <- CMBWindow(phi = c(0, pi/4, pi/4, pi/5),
theta = c(pi/2, pi/2, pi/4, pi/2 - pi/20))
sky <- CMBDataFrame(nside = 32)
win <- window(sky, polygon)
geoArea(win)
pack <- "rcosmo"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
pack <- "rcosmo"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(rcosmo)
library(rcosmo)
library(rcosmo)
pack <- "rcosmo"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
pack <- "rcosmo"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
which(c(TRUE, TRUE, FALSE))
cmbdat <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
library(rcosmo)
cmbdat <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
library(rcosmo)
cmbdat <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
library(rcosmo)
cmbdat <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
cmbdat[1, , drop = FALSE]
cmbdat$data[1, , drop = FALSE]
library(rcosmo)
munmap(cmbdat$data)
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
cap <- window(map, new.window = win)
munmap(map$data)
mmap::munmap(map$data)
library(rcosmo)
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
cap <- window(map, new.window = win)
library(rcosmo)
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
cap <- window(map, new.window = win)
library(rcosmo)
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
cap <- window(map, new.window = win)
library(rcosmo)
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
cap <- window(map, new.window = win)
plot(cap)
cap
library(rcosmo)
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
mmap::munmap(map$data)
mmap::munmap(map$data)
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
cap <- window(map, new.window = win)
plot(cap)
mmap::munmap(map$data)
# Make a CMBDat object and take a sample data.frame
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
# Get windows to make CMBDataFrames
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
win2 <- CMBWindow(phi = c(0, pi/4, pi/4, pi/5),
theta = c(pi/2, pi/2, pi/4, pi/2 - pi/20))
cap <- window(map, new.window = win)
polygon <- window(map, new.window = win2)
plot(cap)
plot(polygon, add = TRUE)
summary(cap)
summary(polygon)
mmap::munmap(map$data)
mmap::munmap(map$data)
library(rcosmo)
mmap::munmap(map$data)
# Make a CMBDat object and take a sample data.frame
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
# Get windows to make CMBDataFrames
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
win2 <- CMBWindow(phi = c(0, pi/4, pi/4, pi/5),
theta = c(pi/2, pi/2, pi/4, pi/2 - pi/20))
cap <- window(map, new.window = win)
polygon <- window(map, new.window = win2)
library(rcosmo)
mmap::munmap(map$data)
# Make a CMBDat object and take a sample data.frame
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
# Get windows to make CMBDataFrames
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
win2 <- CMBWindow(phi = c(0, pi/4, pi/4, pi/5),
theta = c(pi/2, pi/2, pi/4, pi/2 - pi/20))
cap <- window(map, new.window = win)
polygon <- window(map, new.window = win2)
plot(cap)
plot(polygon)
sky <- CMBDataFrame(map)
d <- data.frame(a = c(1,2,3), b = c(1,2,3))\
d <- data.frame(a = c(1,2,3), b = c(1,2,3))
d[1]
library(rcosmo)
mmap::munmap(map$data)
# Make a CMBDat object and take a sample data.frame
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
s <- sample(1:(12*1024^2), 1000000)
dat.sample <- map$data[sort(s)]
# Get windows to make CMBDataFrames
win <- CMBWindow(x = 1, y = 0, z = 0, r = 0.1)
win2 <- CMBWindow(phi = c(0, pi/4, pi/4, pi/5),
theta = c(pi/2, pi/2, pi/4, pi/2 - pi/20))
cap <- window(map, new.window = win)
polygon <- window(map, new.window = win2)
plot(cap)
plot(polygon)
sky <- CMBDataFrame(map)
sky
map$nside
ns <- map$nside
spix <- 1:(12*ns^2)
cmbdf <- map$data[spix,]
mmap::munmap(map$data)
library(rcosmo)
# Make a CMBDat object and take a sample data.frame
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
sky <- CMBDataFrame(map)
# Make a CMBDat object and take a sample data.frame
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
library(rcosmo)
# Make a CMBDat object and take a sample data.frame
map <- CMBReadFITS("../CMB_map_smica1024.fits", mmap = TRUE)
sky <- CMBDataFrame(map)
sky <- CMBDataFrame(map, sample.size = 1000000)
sky <- CMBDataFrame(map, sample.size = 100000)
plot(sky)
sky <- CMBDataFrame(map, sample.size = 500000)
plot(sky)
sky <- CMBDataFrame(map, sample.size = 1000000)
plot(sky)
plot(cap, add = TRUE)
plot(polygon, add = TRUE)
